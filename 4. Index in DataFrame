К каждой ячейке с данными в DataFrame можно обратиться по её индексу и названию столбца. 
Мы можем получать различные срезы данных в зависимости от того, какой запрос к DataFrame мы сформулируем. 
Этот процесс называется индексация. 
Для DataFrame она проводится разными способами.

Атрибут loc[строка, столбец] (от англ. location, «положение») даёт доступ к элементу по строке и столбцу.
Будем использовать для примеров таблицу "будто она есть" с таким названием "df"

df.loc[3, 'genre'] 
# df - Таблица
# 3 - номер строки
# genre - номер столбца

ВИД	                                          РЕАЛИЗАЦИЯ
Одна ячейка	                                  .loc[7, 'genre']
Один столбец	                                .loc[:, 'genre']
Несколько столбцов                            .loc[:, ['genre', 'Artist']]
Несколько столбцов подряд (срез)	            .loc[:, 'user_id': 'genre']
Одна строка	                                  .loc[1]
Все строки, начиная с заданной	              .loc[1:]
Все строки до заданной	                      .loc[:3]
Несколько строк подряд (срез)	                .loc[2:5]

Также вы могли заметить, что запрос к атрибуту loc[] использует квадратные скобки, это напоминает списки в Python. 
Индексация здесь очень похожа на индексацию списков.

Задача 1
Получите таблицу, состоящую из столбцов genre и Artist. 
Сохраните её в переменной genre_fight.

Посчитайте число прослушанных треков в жанре поп.
Для этого лучше всего использовать логическое условие genre_fight['genre'] == 'pop'. Сохраните результат в переменной genre_pop. Напечатайте ответ на экране в таком виде:
Число прослушанных треков в жанре поп равно

import pandas as pd
df = pd.read_csv('music_log.csv')

genre_fight = df.loc[:, ['genre', 'Artist']]
genre_pop = genre_fight.loc[genre_fight.loc[:,'genre'] == 'pop']['genre'].count() #  используем метод .count() 
                                                                                  #  для подсчета записей, удовлетворяющих условию 
                                                                                  #  в столбце 'genre'

print("Число прослушанных треков в жанре поп равно", genre_pop)
print(genre_fight)

Задача 2
Теперь посчитайте число прослушанных треков в жанре рок. 
Допишите в код подсчёт, похожий на предыдущий, только с логическим условием df['genre'] == 'rock'.
Сохраните результат в переменной genre_rock. Напечатайте ответ на экране в таком виде:

import pandas as pd
df = pd.read_csv('music_log.csv')
genre_fight = df.loc[:, ['genre', 'Artist']]

genre_pop = genre_fight.loc[genre_fight.loc[:,'genre'] == 'pop']['genre'].count()
genre_rock = genre_fight.loc[genre_fight.loc[:,'genre'] == 'rock']['genre'].count() #  используем метод .count() 
                                                                                    #  для подсчета записей, удовлетворяющих условию 
                                                                                    #  в столбце 'genre'


print("Число прослушанных треков в жанре поп равно", genre_pop)
print("Число прослушанных треков в жанре рок равно", genre_rock)

Задача 3
Напишите условную конструкцию, которая сравнивает полученные значения и выводит информацию о победителе в этом бою! 
Если победил жанр рок, то выведите сообщение "Рок победил!", а если победил жанр поп - сообщение "Попса forever!"

import pandas as pd
df = pd.read_csv('music_log.csv')
genre_fight = df.loc[:, ['genre', 'Artist']]

genre_pop = genre_fight.loc[genre_fight.loc[:,'genre'] == 'pop']['genre'].count()
genre_rock = genre_fight.loc[genre_fight.loc[:,'genre'] == 'rock']['genre'].count()

print("Число прослушанных треков в жанре поп равно", genre_pop)
print("Число прослушанных треков в жанре рок равно", genre_rock)

if genre_rock > genre_pop:
    print("Рок победил!")
else:
    print("Попса forever!")
